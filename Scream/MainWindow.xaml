<adonisControls:AdonisWindow  xmlns:adonisControls="clr-namespace:AdonisUI.Controls;assembly=AdonisUI"
        xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
        x:Class="Scream.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Scream" xmlns:res="clr-namespace:Scream.Resources" 
        xmlns:tb="http://www.hardcodet.net/taskbar" mc:Ignorable="d" ResizeMode="CanMinimize"
        PlaceTitleBarOverContent="True" WindowStartupLocation="CenterScreen" Title="Scream" Height="500" Width="800">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <GroupBox Grid.Column="0" Padding="0"  Width="188">
            <StackPanel x:Name="Toggle">
                <Border Height="{Binding Path=TitleBarActualHeight, RelativeSource={RelativeSource AncestorType={x:Type adonisControls:AdonisWindow}}}" />
                <TextBlock Margin="{adonisUi:Space 3, 1, 0, 1}" FontSize="16" Text="{x:Static res:Strings.ColorScheme}" />
                <CheckBox x:Name="ToggleColorScheme" Margin="{adonisUi:Space 5, 0, 3, 2}" Content="{x:Static res:Strings.DarkMode}" IsChecked="{Binding ColorScheme}" Click="Toggle_Click"  Style="{DynamicResource {x:Static adonisUi:Styles.ToggleSwitch}}"/>
                <TextBlock Margin="{adonisUi:Space 3, 1, 0, 1}" FontSize="16" Text="{x:Static res:Strings.Toggle}"></TextBlock>    
                <Grid Grid.Row="1" Margin="{adonisUi:Space 5, 0, 3, 2}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="{adonisUi:Space 1}" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="{adonisUi:Space 1}" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <CheckBox Grid.Row="0" x:Name="ToggleAutoStart"  Content="{x:Static res:Strings.autoStart}" IsChecked="{Binding AutoStart}" Click="Toggle_Click"  Style="{DynamicResource {x:Static adonisUi:Styles.ToggleSwitch}}"/>
                    <CheckBox Grid.Row="2" x:Name="ToggleUDPSupport" Content="{x:Static res:Strings.UDPSupport}" IsChecked="{Binding UDPSupport}" Click="Toggle_Click"  Style="{DynamicResource {x:Static adonisUi:Styles.ToggleSwitch}}"/>
                    <CheckBox Grid.Row="4" x:Name="ToggleShareOverLan" Content="{x:Static res:Strings.ShareOverLan}" IsChecked="{Binding ShareOverLan}" Click="Toggle_Click"  Style="{DynamicResource {x:Static adonisUi:Styles.ToggleSwitch}}"/>
                </Grid>
                <ListBox Name="Major" Height="Auto" SelectionMode="Single" FontSize="20" >
                    <ListBoxItem Padding="{adonisUi:Space 3, 1, 0, 1}" Content="{x:Static res:Strings.Outbounds}"/>
                    <ListBoxItem Padding="{adonisUi:Space 3, 1, 0, 1}" Content="{x:Static res:Strings.Rules}"/>
                    <ListBoxItem Padding="{adonisUi:Space 3, 1, 0, 1}" Content="{x:Static res:Strings.Preferences}"/>
                </ListBox>
                <ListBox Name="Minor" SelectionMode="Single" FontSize="20" ItemContainerStyle="{DynamicResource {x:Static adonisUi:Styles.RippleListBoxItem}}">
                    <ListBoxItem Padding="{adonisUi:Space 3, 1, 0, 1}" x:Name="ApplyConfig" PreviewMouseLeftButtonDown="ApplyConfig_PreviewMouseLeftButtonDown" Content="{x:Static res:Strings.ApplyConfig}"/>
                </ListBox>
            </StackPanel>
            
        </GroupBox>
        <Grid Grid.Column="1">
            <Frame Name="PageFrame" Margin="{adonisUi:Space 1, 4, 1 ,1}" NavigationUIVisibility="Hidden"></Frame>
        </Grid>
    </Grid>
    <Window.Resources>
        <MenuItem x:Key="editPacMenuItem" Header="{x:Static res:Strings.editpac}" Click="EditPacMenuItem_Click" />
        <MenuItem x:Key="resetPacButton" Click="ResetPacButton_Click" Header="{x:Static res:Strings.resetpacfile}" />
        <ContextMenu x:Key="TrayMenu">
            <MenuItem Header="_core status" IsEnabled="False" />
            <MenuItem Header="load core" IsEnabled="False" Click="OverallChanged" />
            <MenuItem Header="{x:Static res:Strings.viewconfig}" Click="ViewCurrentConfig" />
            <MenuItem Header="{x:Static res:Strings.showlog}" Click="ShowLogMenuItem_Click" />
            <Separator />
            <MenuItem Header="{x:Static res:Strings.pacmode}" Tag="0" Click="ModeChanged" />
            <MenuItem Header="{x:Static res:Strings.globalmode}" Tag="1" Click="ModeChanged" />
            <MenuItem Header="{x:Static res:Strings.manualmode}" Tag="2" Click="ModeChanged" />
            <Separator />
            <MenuItem Header="{x:Static res:Strings.server}" />
            <MenuItem Header="{x:Static res:Strings.routingrule}" />
            <MenuItem Header="{x:Static res:Strings.paclist}" />
            <MenuItem Header="{x:Static res:Strings.configure}" Click="ShowWindow" />
            <MenuItem Visibility="Collapsed" Header="{x:Static res:Strings.exportbackup}" />
            <Separator />
            <MenuItem Header="{x:Static res:Strings.help}" Click="ShowHelp" />
            <MenuItem Header="{x:Static res:Strings.quit}" Click="QuitScream" />
        </ContextMenu>
        <!-- the application's NotifyIcon - started from App.xaml.cs. Declares its own view model. -->
        <tb:TaskbarIcon x:Key="NotifyIcon" IconSource="/Resources/Scream.ico" ContextMenu="{StaticResource TrayMenu}"></tb:TaskbarIcon>
    </Window.Resources>
</adonisControls:AdonisWindow>
